import com.atlassian.jira.issue.Issue
import groovyx.net.http.HTTPBuilder;
import groovyx.net.http.ContentType;
import com.opensymphony.workflow.InvalidInputException
import static groovyx.net.http.Method.*
import groovy.json.JsonSlurper 
import com.atlassian.jira.component.ComponentAccessor

def issueManager = ComponentAccessor.getIssueManager();
Issue issueKey  = issue
def customFieldManager = ComponentAccessor.getCustomFieldManager()

def errors = []
//--------------------------GET-CUSTOM-FEILDS-----------------
def type_of_installation = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_13908")) 
def Owner_of_equipment = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_23520"))
def New_CPE_Serial = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_21806"))
def New_ICCID = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_21807"))
def Old_CPE_Serial = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_21805"))
def Old_ICCID = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_21808"))
def Accessories = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_22000"))
def Old_Accessories = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_23522"))
def Agent_Name = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_12565")) 
def Agent_Code = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_23507")) 
def defective = (String)issue.getCustomFieldValue(customFieldManager.getCustomFieldObject("customfield_23521")) 
def cpeRes = customFieldManager.getCustomFieldObject("customfield_21902")
def simRes = customFieldManager.getCustomFieldObject("customfield_21901")
def accessoryRes = customFieldManager.getCustomFieldObject("customfield_21900")
def RoundUpAssets = customFieldManager.getCustomFieldObject("customfield_23523")

//--------------------------API-SAMPLE-----------------------
def CallAsset(URL){
     def Key = "lHvpvXqxo6g38q2Uzi8KrTPNar_oW129dM3w2daLKOhKkrPJF1sNN4WlaaJe2qX86fJx0ga2Q8gsH7hgBbdtQcKrb3icoJODW6o2pZOYa5IQMP_NpZEAc2JIGA-WSagESVmPOww3le4Ag99c5IuSWEtoF3McGTHw2wgTnAyoeYcuEcSn-Wmz57dydBSsg5bY44A2YZNZrwbZFaCFzvqY3yZdDjinqdMqp94nDenV1X1K-oG1MRuegGrx33jmgzZ3B5QtOPHFzXSmu7KnZZydJsYV_LyWI-aLNvd51EUYg_z3XtgELRAPC0Odz56A-QPkE7wuKgtn9mDtG32L5RjS7Q_MDcjgnSXxVPZEhsLcmxVgGDPO4oO7-n2nMDL7gb_N7HYPFqRsUQsX9_JPYqDZkzE_ImIWOoYw97JBsiTuXzygBFQeQbHkh75z_CZUY0CBTor83ooTT_uIPwy9kmy0t9maNuxWN7OSW95wibv_rJMTTxiVgdCQnddYMLNMyxWFVodInetbzQQ-6ohEWUifvTKWq2hKrWCwc-jFqn3lIuFnJDQhzvIveif11lrEKj-yQYxk8eG8vUwOJbjDuz-JdAl68D-AKSsbKf1QqOTYwlv-qboKL3wjaPuFRnvtYUnkDfjptvQlTCszgccXvBL2cH9TpTAnTrRYChWVqOy8byTUjPoNvbPvQ9g4TSnuvhd6mnKZOpIxXhBQaqiQHhLnQUdhO-DrzX5ONzu1B_BGMGao81O_8hy6WrYx9Pz18tfN2qdSI55B121uUs7fbEyO8zxGFGjKjLCsS8qV25_Zgs-CKXv8lE6njVXKp84d-H-2ZdlIjENbp83OmIej0U3T9sngCRTBTSu7kopQcpDk5UGP48goqwrrJ41Y3nUdVUW9UCRFyqZV8pX3XFnn-Uh74juf75Wvk-8Vqpl2EQbKCd3Ka7my56ALsiB3K1cNWVUfCHmluHwc0NzwQSzY4jdEfcZlj9KVf3rcmZ94bWQnXng1OYI7QCJnVyGjDcTnaHe58-WJ3srCJg9t6dxRly-Iy-6obFSUfldX3QOEmYO4pGwLdMCvrcKhhmFMySNdT6MDPrrAsQ"
        def http = new HTTPBuilder(URL)
        http.request(GET, ContentType.JSON) {
            requestContentType = ContentType.JSON
            request.addHeader("ContentType", "application/json")
            request.addHeader("Authorization", "bearer ${Key}")
            def parser = new JsonSlurper()
            response.success = { resp, JSON ->
                    return JSON//.data//.AssetCode[0]
   }    }   }
def Asset = "http://10.104.26.112:81/api/viewAsset?userId=3198&"//BASE URL
//-------TEMPLATE-OF-API-CALLING--->----->>>>>>> ["URL", "ERROR", CATEGORY, "ASSET_NAME", ] 

def AccessoryCheck = false
def AccessoriesPool= [ 
    ["${Asset}status=Contractor---Intact&agentCode=${Agent_Code}&Category=${Accessories}", "NEW_accessory"], 
    ["${Asset}status=Contractor---Round%20up&agentCode=${Agent_Code}&Category=${Accessories}", "OLD_accessory"],
]
def Round_Up_Items_Code = ""
//==========================================FIRST=STATE===============================================================
def AssetItems= []
def RoundUpItems = []
if (Owner_of_equipment == "استفاده از تجهیزات مبین نت") {
    AssetItems.add(["${Asset}serial=${New_CPE_Serial.trim()}","Contractor---Intact", "CPE","NEW_CPE"])
    AssetItems.add(["${Asset}serial=${New_ICCID.trim()}", "Contractor---Intact", "SIM","NEW_SIM"])
    AccessoryCheck = true
}
//==========================================SECOND=STATE===============================================================
else if (Owner_of_equipment == "استفاده از تجهیزات مشتری" && !defective) {
        AssetItems.add(["${Asset}serial=${Old_CPE_Serial.trim()}","Customer---Round up", "CPE", "OLD_CPE"])
        AssetItems.add(["${Asset}serial=${Old_ICCID.trim()}", "Customer---Round up", "SIM","OLD_SIM"])
}
else if (Owner_of_equipment == "استفاده از تجهیزات مشتری" && defective) { 
    switch(defective.contains(" ")) {
        case defective.contains("تعویض مودم") && defective.contains("تعویض سیم کارت") && defective.contains("تعویض اکسسوری"):
        	 AssetItems.add(["${Asset}serial=${New_CPE_Serial.trim()}", "Contractor---Intact", "CPE", "New_CPE"])
             AssetItems.add(["${Asset}serial=${New_ICCID.trim()}", "Contractor---Intact", "SIM", "NEW_SIM"])
             AccessoryCheck = true
          //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
 		    def roundUp = CallAsset("${Asset}serial=${Old_CPE_Serial.trim()}")
 		    Round_Up_Items_Code += roundUp.data.AssetCode[0] 
 		    def roundUpSim = CallAsset("${Asset}serial=${Old_ICCID.trim()}")
 		    Round_Up_Items_Code += "&" + roundUpSim.data.AssetCode[0]
     		def roundUpAccessory = CallAsset("${Asset}status=customer---Installation%20consum&Category=${Old_Accessories}",)
 		    Round_Up_Items_Code += "&" + roundUpAccessory.data.AssetCode[0]
          
         break

        case defective.contains("تعویض مودم") && defective.contains("تعویض اکسسوری"):
            AssetItems.add(["${Asset}serial=${New_CPE_Serial.trim()}", "Contractor---Intact", "CPE", "NEW_CPE"])
            AssetItems.add(["${Asset}serial=${Old_ICCID.trim()}", "Customer---Round up", "SIM","OLD_SIM"])
            AccessoryCheck = true
          //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
         def roundUp = CallAsset("${Asset}serial=${Old_CPE_Serial.trim()}")
 		    Round_Up_Items_Code += roundUp.data.AssetCode[0] 
     		def roundUpAccessory = CallAsset("${Asset}status=customer---Installation%20consum&Category=${Old_Accessories}",)
 		    Round_Up_Items_Code += "&" + roundUpAccessory.data.AssetCode[0]
        
         break
         
        case defective.contains("تعویض سیم کارت")&&defective.contains("تعویض اکسسوری"):
      		AssetItems.add(["${Asset}serial=${Old_CPE_Serial.trim()}","Customer---Round up", "CPE", "OLD_CPE"])
            AssetItems.add(["${Asset}serial=${New_ICCID.trim()}", "Contractor---Intact", "SIM", "NEW_SIM"])
            AccessoryCheck = true
          //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
 		    def roundUpSim = CallAsset("${Asset}serial=${Old_ICCID.trim()}")
 		    Round_Up_Items_Code += "&" + roundUpSim.data.AssetCode[0]
     		def roundUpAccessory = CallAsset("${Asset}status=customer---Installation%20consum&Category=${Old_Accessories}",)
 		    Round_Up_Items_Code += "&" + roundUpAccessory.data.AssetCode[0]
         
         break
         
        case defective.contains("تعویض مودم") && defective.contains("تعویض سیم کارت"):
            AssetItems.add(["${Asset}serial=${New_CPE_Serial.trim()}", "Contractor---Intact", "CPE", "NEW_CPE"])
            AssetItems.add(["${Asset}serial=${New_ICCID.trim()}", "Contractor---Intact", "SIM", "NEW_SIM"])
          //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
            def roundUp = CallAsset("${Asset}serial=${Old_CPE_Serial.trim()}")
 		    Round_Up_Items_Code += roundUp.data.AssetCode[0] 
 		    def roundUpSim = CallAsset("${Asset}serial=${Old_ICCID.trim()}")
 		    Round_Up_Items_Code += "&" + roundUpSim.data.AssetCode[0]
     	
        
         break

        case defective.contains("تعویض مودم"):
             AssetItems.add(["${Asset}serial=${New_CPE_Serial.trim()}", "Contractor---Intact", "CPE", "NEW_CPE"])
             AssetItems.add(["${Asset}serial=${Old_ICCID.trim()}", "Customer---Round up", "SIM","OLD_SIM"])
              //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
            def roundUp = CallAsset("${Asset}serial=${Old_CPE_Serial.trim()}")
 		    Round_Up_Items_Code += roundUp.data.AssetCode[0] 
         
            break
     	
         case defective.contains("تعویض سیم کارت"):
       		AssetItems.add(["${Asset}serial=${Old_CPE_Serial.trim()}","Customer---Round up", "CPE", "OLD_CPE"])
            AssetItems.add(["${Asset}serial=${New_ICCID.trim()}", "Contractor---Intact", "SIM", "NEW_SIM"])
              //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
           def roundUpSim = CallAsset("${Asset}serial=${Old_ICCID.trim()}")
 		    Round_Up_Items_Code += "&" + roundUpSim.data.AssetCode[0]
         break 
         
         case defective.contains("تعویض اکسسوری"):
       		AssetItems.add(["${Asset}serial=${Old_CPE_Serial.trim()}","Customer---Round up", "CPE", "OLD_CPE"])
            AssetItems.add(["${Asset}serial=${Old_ICCID.trim()}", "Customer---Round up", "SIM","OLD_SIM"])
            AccessoryCheck = true
              //-------------------------ADD-TO-NEEDED-ROUND-UP---------------------  
            def roundUpAccessory = CallAsset("${Asset}status=customer---Installation%20consum&Category=${Old_Accessories}",)
 		    Round_Up_Items_Code += "&" + roundUpAccessory.data.AssetCode[0]
         break
         

     }
} 
issue.setCustomFieldValue(RoundUpAssets, Round_Up_Items_Code.toString())

//if (type_of_installation == "Installation"){
if (AccessoryCheck == true) {
    def responseReceived = false
    def handleError = false
    AccessoriesPool.each { data ->
        if (!responseReceived) {
            def result = CallAsset(data[0])
            def assetCode = result.data.AssetCode[0].toString()
            if (assetCode == "null") {
                if(handleError == false){
                errors << "Agent does not have any ${Accessories} in its pool" // Add error message to the list
                }
                handleError = true
            } else { responseReceived = true // Set flag to indicate response was received
                log.warn("${Accessories} Asset code is ${assetCode}")
    if(data[1].split("_")[1]== "accessory") {
       issue.setCustomFieldValue(accessoryRes,data[1].toString()+"&"+assetCode.toString())
    }                
  }  }  }  }
//--------------------CALLING-API-FOR-CPE-&-SIM------------------------------------
AssetItems.each { data ->
  def result = CallAsset(data[0])
  def status = result.data.Status[0].toString() 
  def assetCode = result.data.AssetCode[0].toString() 
  def categoryCode = result.data.CategoryCode[0].toString()
    log.warn(result)
  if(!assetCode){
        errors << "${data[3]} does not exist " // Add error message to the list        
   }
  if(status != data[1]) {
    errors << "${data[3]} status is not valid"      
  }
  if (categoryCode != data[2]) {
    errors << "${data[3]} category is not valid"   
  }
  if (result.data.size > 1) {
    errors << "Please insert ${data[3]} complete" 
  }
    log.warn("${data[3]} Asset code is ${assetCode}")
    switch(data[3].split("_")[1]){
      case "CPE":
        issue.setCustomFieldValue(cpeRes,data[3].toString()+"&"+assetCode.toString())
       	break
      case "SIM":
        issue.setCustomFieldValue(simRes,data[3].toString()+"&"+assetCode.toString())
        break
    }
}

 if(errors) {
  def errorMessage = errors.join('\n -------> ') // Concatenate all error messages
  log.error(errorMessage) // Log all errors
  throw new InvalidInputException(errorMessage) // Throw a single exception with all errors
 }else{
 def assetChecked = customFieldManager.getCustomFieldObject("customfield_23518")
def text = "true"
issue.setCustomFieldValue(assetChecked,text.toString())
 }
//} for type installation checking
